"""
–ì–ª–∞–≤–Ω–æ–µ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Flet
"""
import asyncio
import logging
from typing import Optional

import flet as ft
from flet import Colors

from ..config.settings import settings
from ..utils.dependency import container, inject
from ..core.events import EventBus
from ..core.client_manager import ClientManagerImpl
from ..core.gamepad_manager import GamepadManagerImpl
from ..api.server import FastAPIServer
from ..utils.types import ClientManager, GamepadManager

logger = logging.getLogger(__name__)


class RemoteGamepadApp:
    """–û—Å–Ω–æ–≤–Ω–æ–µ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    
    def __init__(self) -> None:
        self.page: Optional[ft.Page] = None
        self.event_bus: EventBus = inject(EventBus)
        self.client_manager: ClientManager = inject(ClientManager)
        self.gamepad_manager: GamepadManager = inject(GamepadManager)
        self.server: FastAPIServer = inject(FastAPIServer)
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.status_text: Optional[ft.Text] = None
        self.client_list: Optional[ft.ListView] = None
        self.server_controls: Optional[ft.Row] = None
        self.qr_image: Optional[ft.Image] = None
        
        logger.info("RemoteGamepadApp initialized")
    
    async def main(self, page: ft.Page) -> None:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.page = page
        await self._setup_page()
        await self._build_ui()
        await self._setup_event_handlers()
        
        # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∑–¥–µ—Å—å - –æ–Ω–∏ –≤—ã–∑—ã–≤–∞—é—Ç –æ—à–∏–±–∫–∏
        
        logger.info("GUI application started")
    
    async def _wait_for_page_ready(self) -> None:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if not self.page:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞
        max_attempts = 10
        for attempt in range(max_attempts):
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                if hasattr(self.page, '_page'):
                    break
                await asyncio.sleep(0.1)
            except Exception:
                await asyncio.sleep(0.1)
        
        logger.debug(f"Page ready after {attempt + 1} attempts")
    
    async def _setup_page(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if not self.page:
            return
        
        self.page.title = settings.gui_title
        self.page.window.width = settings.gui_width
        self.page.window.height = settings.gui_height
        self.page.theme_mode = ft.ThemeMode.DARK if settings.gui_theme == "dark" else ft.ThemeMode.LIGHT
        self.page.padding = 20
        self.page.spacing = 20
    
    async def _build_ui(self) -> None:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if not self.page:
            return
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ft.Container(
            content=ft.Text(
                "üéÆ RemoteGamepad Server",
                size=28,
                weight=ft.FontWeight.BOLD,
                color=Colors.WHITE
            ),
            padding=20,
            bgcolor=Colors.BLUE_900,
            border_radius=12,
            margin=ft.margin.only(bottom=20)
        )
        
        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
        self.status_text = ft.Container(
            content=ft.Text(
                "üî¥ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                size=18,
                weight=ft.FontWeight.NORMAL,
                color=Colors.WHITE
            ),
            padding=15,
            bgcolor=Colors.RED_900,
            border_radius=8,
            margin=ft.margin.only(bottom=20)
        )
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º
        self.server_controls = ft.Container(
            content=ft.Row([
                ft.ElevatedButton(
                    "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä",
                    on_click=self._start_server,
                    bgcolor=Colors.GREEN_600,
                    color=Colors.WHITE,
                    style=ft.ButtonStyle(
                        shape=ft.RoundedRectangleBorder(radius=8),
                        padding=15
                    )
                ),
                ft.ElevatedButton(
                    "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä",
                    on_click=self._stop_server,
                    bgcolor=Colors.RED_600,
                    color=Colors.WHITE,
                    disabled=True,
                    style=ft.ButtonStyle(
                        shape=ft.RoundedRectangleBorder(radius=8),
                        padding=15
                    )
                ),
                ft.ElevatedButton(
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    on_click=self._open_settings,
                    bgcolor=Colors.BLUE_600,
                    color=Colors.WHITE,
                    style=ft.ButtonStyle(
                        shape=ft.RoundedRectangleBorder(radius=8),
                        padding=15
                    )
                ),
                ft.ElevatedButton(
                    "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                    on_click=self._refresh_client_list,
                    bgcolor=Colors.ORANGE_600,
                    color=Colors.WHITE,
                    style=ft.ButtonStyle(
                        shape=ft.RoundedRectangleBorder(radius=8),
                        padding=15
                    )
                )
            ], spacing=10),
            padding=20,
            bgcolor=Colors.GREY_900,
            border_radius=12,
            margin=ft.margin.only(bottom=20)
        )
        
        # –ü–æ–ª–µ –¥–ª—è IP –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
        self.server_ip_field = ft.TextField(
            value=settings.server.host,
            width=250,
            hint_text="IP –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (0.0.0.0 = –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã)",
            border_color=Colors.BLUE_400,
            focused_border_color=Colors.BLUE_200,
            hint_style=ft.TextStyle(color=Colors.GREY_400)
        )
        
        self.server_ip_input = ft.Container(
            content=ft.Column([
                ft.Text("üåê IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞", size=16, weight=ft.FontWeight.NORMAL, color=Colors.WHITE),
                self.server_ip_field
            ]),
            padding=15,
            bgcolor=Colors.GREY_900,
            border_radius=8,
            margin=ft.margin.only(bottom=10)
        )
        
        # –ü–æ–ª–µ –¥–ª—è IP –∞–¥—Ä–µ—Å–∞ –≤ QR-–∫–æ–¥–∞
        self.qr_ip_field = ft.TextField(
            value="100.102.5.118",
            width=250,
            hint_text="IP –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤",
            border_color=Colors.GREEN_400,
            focused_border_color=Colors.GREEN_200,
            hint_style=ft.TextStyle(color=Colors.GREY_400)
        )
        
        self.qr_ip_input = ft.Container(
            content=ft.Column([
                ft.Text("üì± IP –¥–ª—è QR-–∫–æ–¥–∞", size=16, weight=ft.FontWeight.NORMAL, color=Colors.WHITE),
                self.qr_ip_field
            ]),
            padding=15,
            bgcolor=Colors.GREY_900,
            border_radius=8,
            margin=ft.margin.only(bottom=20)
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
        server_info = ft.Card(
            content=ft.Container(
                content=ft.Column([
                    ft.Text("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ", weight=ft.FontWeight.BOLD),
                    ft.Text(f"üåê –°–µ—Ä–≤–µ—Ä: {settings.server.host}:{settings.server.port}"),
                    ft.Text(f"üë• –ú–∞–∫—Å–∏–º—É–º –∫–ª–∏–µ–Ω—Ç–æ–≤: {settings.server.max_clients}"),
                    self.status_text,
                    ft.Divider(),
                    ft.Text("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", weight=ft.FontWeight.BOLD),
                    ft.Text("IP —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è –∑–∞–ø—É—Å–∫–∞):"),
                    self.server_ip_input,
                    ft.Text("IP –¥–ª—è QR-–∫–æ–¥–∞ (–¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤):"),
                    self.qr_ip_input
                ]),
                padding=15
            )
        )
        
        # –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.client_list = ft.ListView(
            height=200,
            spacing=5,
            padding=ft.padding.all(10)
        )
        
        clients_card = ft.Card(
            content=ft.Container(
                content=ft.Column([
                    ft.Text("üë• –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", weight=ft.FontWeight.BOLD),
                    self.client_list
                ]),
                padding=15
            )
        )
        
        # QR –∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.qr_image = ft.Image(
            width=150,
            height=150,
            fit=ft.ImageFit.CONTAIN
        )
        
        qr_placeholder = ft.Container(
            content=ft.Text("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä\n–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR", 
                           text_align=ft.TextAlign.CENTER, size=12),
            bgcolor=Colors.GREY_200,
            height=150,
            width=150,
            alignment=ft.alignment.center,
            border_radius=10
        )
        
        self.qr_container = ft.Stack([qr_placeholder])
        
        qr_card = ft.Card(
            content=ft.Container(
                content=ft.Column([
                    ft.Text("üì± QR-–∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", weight=ft.FontWeight.BOLD),
                    self.qr_container
                ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                padding=15
            )
        )
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ ScrollView
        main_content = ft.Column([
            title,
            self.server_controls,
            ft.Row([
                ft.Column([server_info, clients_card], expand=2),
                ft.Column([qr_card], expand=1)
            ], expand=True)
        ], spacing=20)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —á–µ—Ä–µ–∑ ListView
        self.page.add(
            ft.ListView(
                controls=[main_content],
                expand=True,
                spacing=20,
                padding=20
            )
        )
        
        logger.info("UI built and ready")
    
    async def _setup_event_handlers(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.event_bus.subscribe_client("client_connected", self._on_client_connected)
        self.event_bus.subscribe_client("client_disconnected", self._on_client_disconnected)
        self.event_bus.subscribe_client("client_profile_updated", self._on_client_profile_updated)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
        # –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio.create_task() –∑–¥–µ—Å—å - —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å event loop
        
        logger.debug("Event handlers set up")
    
    async def _start_server(self, e: ft.ControlEvent) -> None:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º IP –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
            server_ip = self.server_ip_field.value if self.server_ip_field.value else "0.0.0.0"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
            self.server._host = server_ip
            logger.info(f"Starting server on {server_ip}:{settings.server.port}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import threading
            server_thread = threading.Thread(
                target=self._run_server_in_thread,
                args=(server_ip,),
                daemon=True
            )
            server_thread.start()
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            await asyncio.sleep(1.0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ uvicorn
            if hasattr(self.server, '_server_instance') and self.server._server_instance:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞
                self.server.is_running = True
                await self._update_server_status(True)
                await self._update_qr_code()
                logger.info("Server started successfully")
            else:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω
                await asyncio.sleep(0.5)
                if hasattr(self.server, '_server_instance') and self.server._server_instance:
                    self.server.is_running = True
                    await self._update_server_status(True)
                    await self._update_qr_code()
                    logger.info("Server started successfully (delayed check)")
                else:
                    await self._show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
                
        except Exception as ex:
            logger.error(f"Failed to start server: {ex}")
            await self._show_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {ex}")
    
    def _run_server_in_thread(self, host: str) -> None:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            import asyncio
            import uvicorn
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            config = uvicorn.Config(
                app=self.server.app,
                host=host,
                port=settings.server.port,
                log_level=settings.server.log_level.lower(),
                access_log=settings.server.debug
            )
            
            server = uvicorn.Server(config)
            self.server._server_instance = server
            self.server._host = host
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞
            self.server.is_running = True
            logger.info(f"Server thread started on {host}:{settings.server.port}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            loop.run_until_complete(server.serve())
            
        except Exception as e:
            logger.error(f"Error in server thread: {e}")
            self.server.is_running = False
    
    async def _stop_server(self, e: ft.ControlEvent) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            if hasattr(self.server, '_server_instance') and self.server._server_instance:
                self.server._server_instance.should_exit = True
                self.server.is_running = False
                logger.info("Server stop signal sent")
            else:
                logger.warning("No server instance found")
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
            try:
                await self.client_manager.cleanup_all_clients()
                logger.info("All clients removed after server stop")
            except Exception as ex:
                logger.error(f"Error cleaning up clients: {ex}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            await self._update_server_status(False)
            await self._clear_qr_code()
            await self._update_client_list()
            logger.info("Server stopped successfully")
            
        except Exception as ex:
            logger.error(f"Failed to stop server: {ex}")
            await self._show_error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {ex}")
    
    async def _open_settings(self, e: ft.ControlEvent) -> None:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        logger.info("Settings dialog requested")
    
    async def _refresh_client_list(self, e: ft.ControlEvent) -> None:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        logger.info("Manual refresh of client list requested")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ await
            clients = self.client_manager._clients.values()
            await self._update_client_list_direct(list(clients))
        except Exception as ex:
            logger.error(f"Error refreshing client list: {ex}")
            await self._show_error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {ex}")
    
    async def _update_server_status(self, is_running: bool) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤ UI"""
        if not self.status_text or not self.server_controls:
            return
        
        if is_running:
            self.status_text.content.value = "üü¢ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"
            self.status_text.bgcolor = Colors.GREEN_900
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            self.server_controls.content.controls[0].disabled = True  # –ó–∞–ø—É—Å—Ç–∏—Ç—å
            self.server_controls.content.controls[1].disabled = False  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        else:
            self.status_text.content.value = "üî¥ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            self.status_text.bgcolor = Colors.RED_900
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            self.server_controls.content.controls[0].disabled = False  # –ó–∞–ø—É—Å—Ç–∏—Ç—å
            self.server_controls.content.controls[1].disabled = True  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        if self.status_text:
            self.status_text.update()
        if self.server_controls:
            self.server_controls.update()
            
        logger.info(f"Server status updated: {'running' if is_running else 'stopped'}")
    
    async def _on_client_connected(self, client_info) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        profile_name = getattr(client_info, 'profile_name', None) or '–ë–µ–∑ –∏–º–µ–Ω–∏'
        logger.info(f"üü¢ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: {client_info.client_id} ({client_info.ip_address}) - {profile_name}")
        await self._update_client_list()
        logger.debug(f"Client connected event handled: {client_info.client_id}")
    
    async def _on_client_disconnected(self, client_info) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        profile_name = getattr(client_info, 'profile_name', None) or '–ë–µ–∑ –∏–º–µ–Ω–∏'
        logger.info(f"üî¥ –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {client_info.client_id} ({client_info.ip_address}) - {profile_name}")
        await self._update_client_list()
        logger.debug(f"Client disconnected event handled: {client_info.client_id}")
    
    async def _on_client_profile_updated(self, client_info) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        profile_name = getattr(client_info, 'profile_name', None) or '–ë–µ–∑ –∏–º–µ–Ω–∏'
        logger.info(f"üîÑ –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {client_info.client_id} -> {profile_name}")
        await self._update_client_list()
        logger.debug(f"Client profile updated event handled: {client_info.client_id}")
    
    async def _update_client_list(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        if not self.client_list:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ await
            clients = list(self.client_manager._clients.values())
            await self._update_client_list_direct(clients)
        except Exception as ex:
            logger.error(f"Error updating client list: {ex}")
            # Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            if self.client_list:
                self.client_list.controls.clear()
                self.client_list.controls.append(
                    ft.Text(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {ex}", color=Colors.RED_400)
                )
                self.client_list.update()
    
    async def _update_client_list_direct(self, clients: list) -> None:
        """–ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ ClientManager"""
        if not self.client_list:
            return
        
        self.client_list.controls.clear()
        
        if not clients:
            self.client_list.controls.append(
                ft.Text("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", italic=True)
            )
        else:
            for client in clients:
                status_color = {
                    "connected": Colors.GREEN_400,
                    "active": Colors.BLUE_400,
                    "disconnected": Colors.RED_400,
                    "error": Colors.ORANGE_400
                }.get(client.status.value, Colors.GREY_400)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                client_name = getattr(client, 'profile_name', None) or client.client_id
                
                client_card = ft.Container(
                    content=ft.Column([
                        ft.Row([
                            ft.Text(f"üîó {client_name}", weight=ft.FontWeight.BOLD, expand=True, color=Colors.WHITE),
                            ft.Icon(ft.Icons.CIRCLE, color=status_color, size=16)
                        ]),
                        ft.Text(f"üìç {client.ip_address}", size=12, color=Colors.GREY_300),
                        ft.Text(f"üÜî {client.client_id[:8]}...", size=10, color=Colors.GREY_400),
                        ft.Text(f"‚è∞ {self._format_time(client.connected_at)}", size=10, color=Colors.GREY_400)
                    ]),
                    padding=20,
                    bgcolor=Colors.GREY_800,
                    border_radius=12,
                    border=ft.border.all(1, Colors.GREY_700),
                    margin=ft.margin.only(bottom=10),
                    shadow=ft.BoxShadow(
                        spread_radius=1,
                        blur_radius=15,
                        color=Colors.BLACK,
                        offset=ft.Offset(2, 2)
                    )
                )
                self.client_list.controls.append(client_card)
        
        if self.client_list:
            self.client_list.update()
            
        logger.info(f"Client list updated directly with {len(clients)} clients")
    
    def _format_time(self, timestamp: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            from datetime import datetime
            dt = datetime.fromtimestamp(timestamp)
            now = datetime.now()
            diff = now - dt
            
            if diff.days > 0:
                return f"{diff.days}–¥ {diff.seconds // 3600}—á"
            elif diff.seconds > 3600:
                return f"{diff.seconds // 3600}—á {(diff.seconds % 3600) // 60}–º"
            elif diff.seconds > 60:
                return f"{diff.seconds // 60}–º"
            else:
                return f"{diff.seconds}—Å"
        except:
            return "???"
    
    async def _show_error(self, message: str) -> None:
        """–ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        # –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º snackbar - Flet –Ω–µ –≥–æ—Ç–æ–≤
        logger.error(f"Error: {message}")
    
    async def _show_info(self, message: str) -> None:
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º snackbar - Flet –Ω–µ –≥–æ—Ç–æ–≤
        logger.info(f"Info: {message}")
    
    async def _update_qr_code(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ QR-–∫–æ–¥–∞"""
        try:
            import qrcode
            import socket
            import os
            
            # –ü–æ–ª—É—á–∞–µ–º IP –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è QR-–∫–æ–¥–∞
            qr_ip = self.qr_ip_field.value if self.qr_ip_field.value else "100.102.5.118"
            url = f"http://{qr_ip}:{settings.server.port}"
            
            logger.info(f"Generating QR code for URL: {url}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
            qr = qrcode.QRCode(version=1, box_size=10, border=5)
            qr.add_data(url)
            qr.make(fit=True)
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = qr.make_image(fill_color="black", back_color="white")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–æ–µ–∫—Ç–Ω—É—é –ø–∞–ø–∫—É (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
            qr_dir = os.path.join(os.getcwd(), "temp")
            os.makedirs(qr_dir, exist_ok=True)
            qr_path = os.path.join(qr_dir, "qr_code.png")
            
            img.save(qr_path)
            logger.info(f"QR code saved to: {qr_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
            if not os.path.exists(qr_path):
                raise FileNotFoundError(f"QR file not created: {qr_path}")
            
            file_size = os.path.getsize(qr_path)
            logger.info(f"QR file size: {file_size} bytes")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            if self.qr_container:
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                self.qr_container.controls.clear()
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                qr_img = ft.Image(
                    src=qr_path,
                    width=150,
                    height=150,
                    fit=ft.ImageFit.CONTAIN,
                    border_radius=10
                )
                
                self.qr_container.controls.append(qr_img)
                
                self.qr_container.update()
                
                logger.info("QR code UI updated successfully")
                logger.info(f"QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {qr_ip}")
            
        except Exception as e:
            logger.error(f"Error generating QR code: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await self._show_error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {str(e)}")
    
    async def _clear_qr_code(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ QR-–∫–æ–¥–∞"""
        try:
            if self.qr_container:
                placeholder = ft.Container(
                    content=ft.Text("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n–ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å'", 
                                   text_align=ft.TextAlign.CENTER, size=12),
                    bgcolor=Colors.GREY_200,
                    height=150,
                    width=150,
                    alignment=ft.alignment.center,
                    border_radius=10
                )
                self.qr_container.controls.clear()
                self.qr_container.controls.append(placeholder)
                
                self.qr_container.update()
                
                logger.info("QR code cleared, showing placeholder")
                
        except Exception as e:
            logger.error(f"Error clearing QR code: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")


async def run_gui_app() -> None:
    """–ó–∞–ø—É—Å–∫ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    event_bus = EventBus()
    client_manager = ClientManagerImpl(event_bus, settings.server.max_clients)
    gamepad_manager = GamepadManagerImpl(event_bus)
    fastapi_server = FastAPIServer(event_bus, client_manager, gamepad_manager)
    
    container.register_singleton(EventBus, event_bus)
    container.register_singleton(ClientManager, client_manager)
    container.register_singleton(GamepadManager, gamepad_manager)
    container.register_singleton(FastAPIServer, fastapi_server)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = RemoteGamepadApp()
    
    # –ó–∞–ø—É—Å–∫ Flet –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await ft.app_async(target=app.main)