"""
–ì–ª–∞–≤–Ω–æ–µ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Flet
"""
import asyncio
import logging
from typing import Optional

import flet as ft
from flet import Colors

from ..config.settings import settings
from ..utils.dependency import container, inject
from ..core.events import EventBus
from ..core.client_manager import ClientManagerImpl
from ..core.gamepad_manager import GamepadManagerImpl
from ..api.server import FastAPIServer
from ..utils.types import ClientManager, GamepadManager

logger = logging.getLogger(__name__)


class RemoteGamepadApp:
    """–û—Å–Ω–æ–≤–Ω–æ–µ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    
    def __init__(self) -> None:
        self.page: Optional[ft.Page] = None
        self.event_bus: EventBus = inject(EventBus)
        self.client_manager: ClientManager = inject(ClientManager)
        self.gamepad_manager: GamepadManager = inject(GamepadManager)
        self.server: FastAPIServer = inject(FastAPIServer)
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.status_text: Optional[ft.Text] = None
        self.client_list: Optional[ft.ListView] = None
        self.server_controls: Optional[ft.Row] = None
        self.qr_image: Optional[ft.Image] = None
        
        logger.info("RemoteGamepadApp initialized")
    
    async def main(self, page: ft.Page) -> None:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.page = page
        await self._setup_page()
        await self._build_ui()
        await self._setup_event_handlers()
        
        logger.info("GUI application started")
    
    async def _wait_for_page_ready(self) -> None:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if not self.page:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞
        max_attempts = 10
        for attempt in range(max_attempts):
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                if hasattr(self.page, '_page'):
                    break
                await asyncio.sleep(0.1)
            except Exception:
                await asyncio.sleep(0.1)
        
        logger.debug(f"Page ready after {attempt + 1} attempts")
    
    async def _setup_page(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if not self.page:
            return
        
        self.page.title = settings.gui_title
        self.page.window.width = settings.gui_width
        self.page.window.height = settings.gui_height
        self.page.theme_mode = ft.ThemeMode.DARK if settings.gui_theme == "dark" else ft.ThemeMode.LIGHT
        self.page.padding = 20
        self.page.spacing = 20
    
    async def _build_ui(self) -> None:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if not self.page:
            return
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ft.Text(
            "üéÆ RemoteGamepad Server",
            size=24,
            weight=ft.FontWeight.BOLD,
            color=Colors.BLUE_400
        )
        
        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
        self.status_text = ft.Text(
            "üî¥ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            size=16,
            color=Colors.RED_400
        )
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º
        self.server_controls = ft.Row([
            ft.ElevatedButton(
                "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä",
                on_click=self._start_server,
                bgcolor=Colors.GREEN_400,
                color=Colors.WHITE
            ),
            ft.ElevatedButton(
                "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä",
                on_click=self._stop_server,
                bgcolor=Colors.RED_400,
                color=Colors.WHITE,
                disabled=True
            ),
            ft.ElevatedButton(
                "üß™ –¢–µ—Å—Ç QR",
                on_click=self._test_qr_code,
                bgcolor=Colors.ORANGE_400,
                color=Colors.WHITE
            ),
            ft.ElevatedButton(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                on_click=self._open_settings,
                bgcolor=Colors.BLUE_400,
                color=Colors.WHITE
            )
        ])
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
        server_info = ft.Card(
            content=ft.Container(
                content=ft.Column([
                    ft.Text("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ", weight=ft.FontWeight.BOLD),
                    ft.Text(f"üåê –ê–¥—Ä–µ—Å: {settings.server.host}:{settings.server.port}"),
                    ft.Text(f"üë• –ú–∞–∫—Å–∏–º—É–º –∫–ª–∏–µ–Ω—Ç–æ–≤: {settings.server.max_clients}"),
                    self.status_text
                ]),
                padding=15
            )
        )
        
        # –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.client_list = ft.ListView(
            height=200,
            spacing=5,
            padding=ft.padding.all(10)
        )
        
        clients_card = ft.Card(
            content=ft.Container(
                content=ft.Column([
                    ft.Text("üë• –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", weight=ft.FontWeight.BOLD),
                    self.client_list
                ]),
                padding=15
            )
        )
        
        # QR –∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.qr_image = ft.Image(
            width=150,
            height=150,
            fit=ft.ImageFit.CONTAIN
        )
        
        qr_placeholder = ft.Container(
            content=ft.Text("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä\n–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR", 
                           text_align=ft.TextAlign.CENTER, size=12),
            bgcolor=Colors.GREY_200,
            height=150,
            width=150,
            alignment=ft.alignment.center,
            border_radius=10
        )
        
        self.qr_container = ft.Stack([qr_placeholder])
        
        qr_card = ft.Card(
            content=ft.Container(
                content=ft.Column([
                    ft.Text("üì± QR-–∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", weight=ft.FontWeight.BOLD),
                    self.qr_container
                ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                padding=15
            )
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.page.add(
            title,
            self.server_controls,
            ft.Row([
                ft.Column([server_info, clients_card], expand=2),
                ft.Column([qr_card], expand=1)
            ], expand=True)
        )
        
        logger.info("UI built and ready")
    
    async def _setup_event_handlers(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.event_bus.subscribe_client("client_connected", self._on_client_connected)
        self.event_bus.subscribe_client("client_disconnected", self._on_client_disconnected)
        
        logger.debug("Event handlers set up")
    
    async def _start_server(self, e: ft.ControlEvent) -> None:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if await self.server.start():
                await self._update_server_status(True)
                await self._update_qr_code()
                logger.info("Server started successfully")
            else:
                await self._show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
        except Exception as ex:
            logger.error(f"Failed to start server: {ex}")
            await self._show_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {ex}")
    
    async def _stop_server(self, e: ft.ControlEvent) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if await self.server.stop():
                await self._update_server_status(False)
                await self._clear_qr_code()
                logger.info("Server stopped successfully")
            else:
                await self._show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
        except Exception as ex:
            logger.error(f"Failed to stop server: {ex}")
            await self._show_error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {ex}")
    
    async def _open_settings(self, e: ft.ControlEvent) -> None:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        logger.info("Settings dialog requested")
    
    async def _test_qr_code(self, e: ft.ControlEvent) -> None:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞"""
        logger.info("Testing QR code generation...")
        await self._update_qr_code()
        await self._show_info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
    
    async def _update_server_status(self, is_running: bool) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤ UI"""
        if not self.status_text or not self.server_controls:
            return
        
        if is_running:
            self.status_text.value = "üü¢ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"
            self.status_text.color = Colors.GREEN_400
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            self.server_controls.controls[0].disabled = True  # –ó–∞–ø—É—Å—Ç–∏—Ç—å
            self.server_controls.controls[1].disabled = False  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        else:
            self.status_text.value = "üî¥ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            self.status_text.color = Colors.RED_400
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            self.server_controls.controls[0].disabled = False  # –ó–∞–ø—É—Å—Ç–∏—Ç—å
            self.server_controls.controls[1].disabled = True  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        if self.status_text:
            self.status_text.update()
        if self.server_controls:
            self.server_controls.update()
            
        logger.info(f"Server status updated: {'running' if is_running else 'stopped'}")
    
    async def _on_client_connected(self, client_info) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        await self._update_client_list()
        logger.debug(f"Client connected event handled: {client_info.client_id}")
    
    async def _on_client_disconnected(self, client_info) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        await self._update_client_list()
        logger.debug(f"Client disconnected event handled: {client_info.client_id}")
    
    async def _update_client_list(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        if not self.client_list:
            return
        
        clients = await self.client_manager.get_clients()
        self.client_list.controls.clear()
        
        if not clients:
            self.client_list.controls.append(
                ft.Text("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", italic=True)
            )
        else:
            for client in clients:
                status_color = {
                    "connected": Colors.GREEN_400,
                    "active": Colors.BLUE_400,
                    "disconnected": Colors.RED_400,
                    "error": Colors.ORANGE_400
                }.get(client.status.value, Colors.GREY_400)
                
                client_card = ft.Container(
                    content=ft.Row([
                        ft.Text(f"üîó {client.client_id}", expand=True),
                        ft.Text(f"üìç {client.ip_address}"),
                        ft.Icon(ft.icons.CIRCLE, color=status_color, size=12)
                    ]),
                    padding=10,
                    bgcolor=Colors.SURFACE_VARIANT,
                    border_radius=5
                )
                self.client_list.controls.append(client_card)
        
        if self.client_list:
            self.client_list.update()
            
        logger.info(f"Client list updated with {len(clients)} clients")
    
    async def _show_error(self, message: str) -> None:
        """–ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        # –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º snackbar - Flet –Ω–µ –≥–æ—Ç–æ–≤
        logger.error(f"Error: {message}")
    
    async def _show_info(self, message: str) -> None:
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º snackbar - Flet –Ω–µ –≥–æ—Ç–æ–≤
        logger.info(f"Info: {message}")
    
    async def _update_qr_code(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ QR-–∫–æ–¥–∞"""
        try:
            import qrcode
            import socket
            import os
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π IP
            hostname = socket.gethostname()
            local_ip = socket.gethostbyname(hostname)
            url = f"http://{local_ip}:{settings.server.port}"
            
            logger.info(f"Generating QR code for URL: {url}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
            qr = qrcode.QRCode(version=1, box_size=10, border=5)
            qr.add_data(url)
            qr.make(fit=True)
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = qr.make_image(fill_color="black", back_color="white")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–æ–µ–∫—Ç–Ω—É—é –ø–∞–ø–∫—É (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
            qr_dir = os.path.join(os.getcwd(), "temp")
            os.makedirs(qr_dir, exist_ok=True)
            qr_path = os.path.join(qr_dir, "qr_code.png")
            
            img.save(qr_path)
            logger.info(f"QR code saved to: {qr_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
            if not os.path.exists(qr_path):
                raise FileNotFoundError(f"QR file not created: {qr_path}")
            
            file_size = os.path.getsize(qr_path)
            logger.info(f"QR file size: {file_size} bytes")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            if self.qr_container:
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                self.qr_container.controls.clear()
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                qr_img = ft.Image(
                    src=qr_path,
                    width=150,
                    height=150,
                    fit=ft.ImageFit.CONTAIN,
                    border_radius=10
                )
                
                self.qr_container.controls.append(qr_img)
                
                self.qr_container.update()
                
                logger.info("QR code UI updated successfully")
                logger.info(f"QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {local_ip}")
            
        except Exception as e:
            logger.error(f"Error generating QR code: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await self._show_error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {str(e)}")
    
    async def _clear_qr_code(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ QR-–∫–æ–¥–∞"""
        try:
            if self.qr_container:
                placeholder = ft.Container(
                    content=ft.Text("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n–ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å'", 
                                   text_align=ft.TextAlign.CENTER, size=12),
                    bgcolor=Colors.GREY_200,
                    height=150,
                    width=150,
                    alignment=ft.alignment.center,
                    border_radius=10
                )
                self.qr_container.controls.clear()
                self.qr_container.controls.append(placeholder)
                
                self.qr_container.update()
                
                logger.info("QR code cleared, showing placeholder")
                
        except Exception as e:
            logger.error(f"Error clearing QR code: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")


async def run_gui_app() -> None:
    """–ó–∞–ø—É—Å–∫ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    event_bus = EventBus()
    client_manager = ClientManagerImpl(event_bus, settings.server.max_clients)
    gamepad_manager = GamepadManagerImpl(event_bus)
    fastapi_server = FastAPIServer(event_bus, client_manager, gamepad_manager)
    
    container.register_singleton(EventBus, event_bus)
    container.register_singleton(ClientManager, client_manager)
    container.register_singleton(GamepadManager, gamepad_manager)
    container.register_singleton(FastAPIServer, fastapi_server)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = RemoteGamepadApp()
    
    # –ó–∞–ø—É—Å–∫ Flet –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await ft.app_async(target=app.main)